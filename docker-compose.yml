version: "3.9"

services:
  rabbitmq: # NOVO SERVIÇO
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"  # Porta do protocolo AMQP
      - "15672:15672" # Interface de gerenciamento web
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  stt:
    build:
      context: .
      dockerfile: services/stt.Dockerfile
    volumes:
      - ./models:/app/models
      - ./config:/app/config
    environment:
      - STT_MODEL_PATH=${STT_MODEL_PATH:-models/stt/vosk-model-small-pt-0.3}
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  tts:
    build:
      context: .
      dockerfile: services/tts.Dockerfile
    volumes:
      # Monta os modelos para persistir downloads e usar vozes customizadas
      - ./models:/app/models
      - ./config:/app/config
      # Cache para os modelos TTS baixados
      - tts_cache:/root/.local/share/tts
    environment:
      - TTS_SPEAKER_WAV_PATH=${TTS_SPEAKER_WAV_PATH:-""}
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - COQUI_TOS_AGREED=1
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  llm:
    build:
      context: .
      dockerfile: services/llm.Dockerfile # CORRIGIDO
    ports:
      - "8002:8002"
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  orchestrator:
    build: .
    command: uvicorn assistant.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app # Monta o código para desenvolvimento com reload
    ports:
      - "8000:8000"
    environment:
      - WAKE_WORD=${WAKE_WORD}
      - LOG_LEVEL=${LOG_LEVEL}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - STT_SERVICE_URL=http://stt:8001
      - TTS_SERVICE_URL=http://tts:8003
      - LLM_SERVICE_URL=http://llm:8002
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      stt:
        condition: service_started
      tts:
        condition: service_started
      llm:
        condition: service_started
      rabbitmq:
        condition: service_healthy # Adicionar dependência
    restart: unless-stopped

  memory_summarizer: # NOVO SERVIÇO
    build:
      context: .
      dockerfile: services/memory_summarizer/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      llm:
        condition: service_started
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - LOG_LEVEL=${LOG_LEVEL}
    restart: unless-stopped

  graph_builder: # <-- NOVO SERVIÇO
    build:
      context: .
      dockerfile: services/graph_builder/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672/
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password # Use a mesma senha definida acima
    restart: unless-stopped

  neo4j: # <-- NOVO SERVIÇO
    image: neo4j:5-community
    ports:
      - "7474:7474" # Interface Web
      - "7687:7687" # Porta Bolt para conexão do driver
    environment:
      - NEO4J_AUTH=neo4j/password # Troque 'password' por uma senha segura
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null --header='Authorization: Basic bmVvNGo6cGFzc3dvcmQ=' http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  db_data:
  tts_cache:
  neo4j_data:
  rabbitmq_data:
